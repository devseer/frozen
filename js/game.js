// Generated by CoffeeScript 1.6.3
(function() {
  var Engine, Handle, Player, Timers, World, root;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  Engine = (function() {
    Engine.prototype.handle = {};

    Engine.prototype.core = {};

    Engine.prototype.objects = {};

    function Engine(canvas, bgm, sfx) {
      this.core.handle = new Handle(canvas, bgm, sfx);
      this.core.timers = new Timers();
      this.objects.player = new Player(this.core.handle);
      this.objects.world = new World(this.core.handle);
      this.main(this);
    }

    Engine.prototype.update = function() {
      var i, _results;
      for (i in this.core) {
        this.core[i].update();
      }
      _results = [];
      for (i in this.objects) {
        _results.push(this.objects[i].update());
      }
      return _results;
    };

    Engine.prototype.draw = function() {
      var i, _results;
      this.core.handle.clear();
      _results = [];
      for (i in this.objects) {
        _results.push(this.objects[i].draw(this.core.handle.context));
      }
      return _results;
    };

    Engine.prototype.main = function(c) {
      var _this = this;
      c.update();
      c.draw();
      return requestAnimationFrame(function() {
        return _this.main(c);
      });
    };

    return Engine;

  })();

  if (!root.Game) {
    root.Game = Engine;
  }

  Player = (function() {
    function Player() {}

    Player.prototype.constuctor = function() {
      this.pos = {
        x: 0,
        y: 0
      };
      this.state = 0;
      return this.frame = 0;
    };

    Player.prototype.update = function() {};

    Player.prototype.draw = function() {};

    return Player;

  })();

  World = (function() {
    function World() {}

    World.prototype.update = function() {};

    World.prototype.draw = function() {};

    return World;

  })();

  Timers = (function() {
    function Timers() {}

    Timers.prototype.update = function() {};

    return Timers;

  })();

  Handle = (function() {
    function Handle(canvas, bgm, sfx) {
      this.canvas = document.getElementById(canvas);
      this.context = this.canvas.getContext('2d');
      this.bgm = document.getElementById(bgm);
      this.sfx = document.getElementById(sfx);
    }

    Handle.prototype.update = function() {};

    Handle.prototype.clear = function() {
      this.context.fillStyle = 'rgb(0, 64, 0)';
      return this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);
    };

    return Handle;

  })();

}).call(this);
